#+TITLE: NixOS configuration
#+AUTHOR: Andrew Bergdorf
#+DATE:Sun Aug 17 18:16:17 2025

* TABLE OF CONTENTS :toc:
- [[#about][ABOUT]]
- [[#flakenix][FLAKE.NIX]]
- [[#home-manager][HOME-MANAGER]]
  - [[#startup][Startup]]
  - [[#packages-for-home-manager][Packages for Home-Manager]]
  - [[#user-scripts][User Scripts]]
  - [[#home-files][Home Files]]
  - [[#env-variables][Env-Variables]]
  - [[#services-and-extras][Services and extras]]
- [[#configurationnix][CONFIGURATION.NIX]]
  - [[#startup-and-imports][Startup and imports]]
  - [[#bootloader-and-networking][Bootloader and Networking]]
  - [[#secrets-sops][Secrets (SOPS)]]
  - [[#timezone-and-locale][Timezone and Locale]]
  - [[#windowing-and-sddm][Windowing and SDDM]]
  - [[#sound][Sound]]
  - [[#users][Users]]
  - [[#activation-scripts][Activation Scripts]]
  - [[#system-packages][System Packages]]
  - [[#system-services-and-daemons][System Services and Daemons]]
  - [[#system-state-version][System State version]]
- [[#filesystemnix][FILESYSTEM.NIX]]
- [[#zennix][ZEN.NIX]]
  - [[#flakenix-1][flake.nix]]
  - [[#zendesktop][zen.desktop]]
- [[#hardware-configurationnix][HARDWARE-CONFIGURATION.NIX]]
- [[#hyprland][HYPRLAND]]
  - [[#monitors][Monitors]]
  - [[#programs-and-aliases][Programs and aliases]]
  - [[#autostart][Autostart]]
  - [[#environment-variables][ENVIRONMENT VARIABLES]]
  - [[#look-and-feel][LOOK AND FEEL]]
  - [[#input][INPUT]]
  - [[#keybindings][KEYBINDINGS]]
  - [[#windows-and-workspaces][WINDOWS AND WORKSPACES]]
- [[#waybar][WAYBAR]]

* ABOUT
This is an attempt to put my nix files in this org-mode file

* FLAKE.NIX
 Flakes allow you to put your whole system in the user home rather than root/etc/nixos which means you don't need sudo to edit the files. Also the flake.lock file is how you can update packages without upgrading nixos?

 #+begin_src nix :tangle flake.nix
# flake.nix
{
  description = "NixOS configuration";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    hyprland.url = "github:hyprwm/Hyprland";
    sops-nix.url = "github:Mic92/sops-nix";
    sops-nix.inputs.nixpkgs.follows = "nixpkgs";
    pia.url = "github:Fuwn/pia.nix";
    pia.inputs.nixpkgs.follows = "nixpkgs";
    zen-browser.url = "github:abergdorf/zen-browser-flake";
    zen-browser.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = inputs@{ nixpkgs, home-manager, sops-nix, pia, ... }:
  let
    pkgs = import nixpkgs {
      system = "x86_64-linux";
      config = {
        allowUnfree = true;
      };
    };
  in
  {
    nixosConfigurations = {
      default = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = {inherit inputs; };
        modules = [
          ./configuration.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.andrew = ./home.nix;
          }
          sops-nix.nixosModules.sops
          pia.nixosModules."x86_64-linux".default
          {nixpkgs.pkgs = pkgs;}

          # This overlay is what provides the pkgs argument to configuration.nix
          ({
            nixpkgs.overlays = [
              (import ./overlays/plex.nix)
            ];
          })
        ];
      };
    };
  };
}


 #+end_src
* HOME-MANAGER
[[file:home.nix]]
** Startup
 This is how i'll put programs in my userspace rather than system environment.

 home.state version: This value determines the Home Manager release that your configuration is
  compatible with. This helps avoid breakage when a new Home Manager release
  introduces backwards incompatible changes.

  You should not change this value, even if you update Home Manager. If you do
  want to update the value, then make sure to first check the Home Manager
  release notes.
 #+begin_src nix :tangle home.nix
{ config, pkgs, ... }:
#this is org mode tangle
{

  home.username = "andrew";
  home.homeDirectory = "/home/andrew";

  home.stateVersion = "24.11"; # Please read the comment before changing.
#+end_src
** Packages for Home-Manager
#+begin_src nix :tangle home.nix
  home.packages = with pkgs; [

    #dependencies
    fd
    ripgrep
    semgrep
    cmake
    gcc
    llvm
    fzf
    age
    sops
    gnumake
    openvpn
    gh
    nh

    #fonts and icons
    bibata-cursors
    hicolor-icon-theme
    adwaita-icon-theme
    adwaita-qt
    adwaita-fonts
    nerd-fonts.fira-code
    nerdfix


    #social
    telegram-desktop
    discord

    #zsh-related
    starship
    fastfetch


    #hyprland stuff
    rofi
    rofi-network-manager
    rofi-file-browser
    libnma-gtk4
    wttrbar
    wlogout
    swaylock
    swayidle
    nwg-look
    hyprshot
    wl-clipboard
    cliphist
    waypaper
    xfce.thunar



    obsidian
    obs-studio
    qbittorrent

    floorp

    #video plugins
    mpv
    ffmpeg
    yt-dlp
    syncplay


    #python
    #(python314.withPackages (ppkgs: [
    #ppkgs.numpy
    #ppkgs.requests
    #ppkgs.pandas
    #ppkgs.polars
    #]))

    ];

qt = {
  enable = true;
  platformTheme.name = "qt6ct";
};

gtk = {
  enable = true;
  iconTheme = {
    name = "Adwaita-dark";
  };
};

#+end_src
** User Scripts
  It is sometimes useful to fine-tune packages, for example, by applying overrides. You can do that directly here, just don't forget the parentheses. Maybe you want to install Nerd Fonts with a limited number of fonts?
     #+begin_src
     (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })
     #+end_src

     You can also create simple shell scripts directly inside your configuration. For example, this adds a command 'my-hello' to your environment:
     #+begin_src nix
 (pkgs.writeShellScriptBin "my-hello" ''
       echo "Hello, ${config.home.username}!"
     '')
     #+end_src

** Home Files
     Home Manager is pretty good at managing dotfiles. The primary way to manage plain files is through 'home.file'.
      Building this configuration will create a copy of 'dotfiles/screenrc' in the Nix store. Activating the configuration will
      then make '~/.screenrc' a symlink to the Nix store copy.

#+begin_src nix
     home.file = {

     ".screenrc".source = dotfiles/screenrc;

     # You can also set the file content immediately.
     ".gradle/gradle.properties".text = ''
       org.gradle.console=verbose
       org.gradle.daemon.idletimeout=3600000
     '';
  };
#+end_src
** Env-Variables
   Home Manager can also manage your environment variables through
   'home.sessionVariables'. These will be explicitly sourced when using a
   shell provided by Home Manager. If you don't want to manage your shell
   through Home Manager then you have to manually source 'hm-session-vars.sh'
   located at either

    ~/.nix-profile/etc/profile.d/hm-session-vars.sh

   or

    ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh

   or

    /etc/profiles/per-user/andrew/etc/profile.d/hm-session-vars.sh

  #+begin_src nix :tangle home.nix
home.sessionVariables = {
    EDITOR = "emacs";
    QT_QPA_PLATFORMTHEME = "qt6ct";
  };

  #+end_src

** Services and extras

  Home-manager can start services as well
  #+begin_src nix :tangle home.nix
   programs.waybar.enable = true;
   programs.emacs.extraPackages = epkgs: with epkgs; [
    vterm
  ];


  # Let Home Manager install and manage itself.
   programs.home-manager.enable = true;
} #final bracket for home.nix!
  #+end_src

* CONFIGURATION.NIX
 This is the mothership where all the files will be linked
 [[file:configuration.nix]]
** Startup and imports
Lets get the main configuration file going. We'll call the inputs and add imports, such as modules from other .nix files.

 #+begin_src nix :tangle configuration.nix
{inputs, config, pkgs, lib, ... }:
#org-mode tangled
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./filesystem.nix
    ];

   nix = {
    settings = {
      auto-optimise-store = true;
      experimental-features = [
        "nix-command"
        "flakes"
        ];
      substituters = ["https://hyprland.cachix.org"];
      trusted-public-keys = ["hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="];
  };
gc = {  #garbage-collect nix-store
automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
    };
};
   # Allow unfree packages


  #Enable polkit (policy kit)
  security.polkit.enable = true;

systemd = {
  user.services.polkit-gnome-authentication-agent-1 = {
    description = "polkit-gnome-authentication-agent-1";
    wantedBy = [ "graphical-session.target" ];
    wants = [ "graphical-session.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
        Restart = "on-failure";
        RestartSec = 1;
        TimeoutStopSec = 10;
      };
  };
  settings.Manager = {
     DefaultTimeoutStopSec=10;
   };
};


  # Enable CUPS to print documents.
  services.printing.enable = true;


#+end_src

** Bootloader and Networking
#+begin_src nix :tangle configuration.nix
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  #openSSH

   services.openssh = {

     enable = true;
     settings.PasswordAuthentication = false;
   };

   # Enable networking
  networking.networkmanager.enable = true;
  networking.networkmanager.plugins = [ pkgs.networkmanager-openvpn];

  programs.nm-applet.enable = true;

  #Keyring for wifi password
  services.gnome.gnome-keyring.enable = true;
  environment.variables.XDG_RUNTIME_DIR = "/run/user/$UID";

  #to get pia to work, need to open the .ovpn file and change compress to comp-lzo no and completely remove <crl-verify> .... </crl-verify>
  services.pia = {
  enable = true;
  authUserPassFile = config.sops.defaultSopsFile;
};


  #programs.openvpn.enable = true;



#+end_src

** Secrets (SOPS)
#+begin_src nix :tangle configuration.nix
# Inside configuration.nix, at the top level with other options like networking, services, etc.
sops = {
  defaultSopsFile = ./secrets/secrets.yaml; # Path relative to configuration.nix
  defaultSopsFormat = "yaml"; # Or json, dotenv, etc.
  age.keyFile = "/home/andrew/.config/sops/age/keys.txt";

  # Define each secret you want to make available to the system.
  # The key names here must match the keys in your secrets.yaml.
  secrets = {
    "wifiPassword" = { # This matches "wifiPassword" in your secrets/secrets.yaml
      # Optional: You can specify owner, group, and mode for the decrypted file
      owner = "root";
      group = "networkmanager";
      mode = "0400";
      # e.g., owner = "root"; group = "networkmanager"; mode = "0400";
      # Consider 'neededForUsers = true;' if a non-root user or service needs it
      # (e.g., NetworkManager might need to read it if you configure wifi directly).
    };
    "authUserPass" = {
      owner = "andrew";
      mode = "0400";
      neededForUsers = true;
    };
  };

  # Optional: You can also define templates to combine multiple secrets into one file.
  # templates."my_app.env" = {
  #   content = ''
  #     MY_API_KEY="${config.sops.placeholder.myApiKey}"
  #   '';
  #   owner = "myuser";
  #   mode = "0400";
  # };
};

#+end_src

** Timezone and Locale
#+begin_src nix :tangle configuration.nix
# Set your time zone.
  time.timeZone = "America/Chicago";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

#+end_src

** Windowing and SDDM
#+begin_src nix :tangle configuration.nix
# Enable the X11 windowing system.
  services.xserver.enable = true;


  # # Enable the KDE Plasma Desktop Environment.
  services.displayManager.sddm = {
  enable = true;
  wayland.enable = true;
  package = pkgs.kdePackages.sddm;
  theme = "catppuccin-mocha";
  extraPackages = with pkgs.kdePackages; [
    breeze-icons
    kirigami
    plasma5support
    qtsvg
    qtvirtualkeyboard
  ];
};

  #services.xserver.desktopManager.plasma5.enable = true;


  programs.hyprland = {
    enable = true;
    package = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.hyprland;
    portalPackage = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.xdg-desktop-portal-hyprland;
  };

  xdg.portal.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };



#+end_src
** Sound
#+begin_src nix :tangle configuration.nix
   # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };


#+end_src

** Users
#+begin_src nix :tangle configuration.nix
# Define user groups
  users.groups.plex = {};

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.andrew = {
    isNormalUser = true;
    description = "Andrew";
    extraGroups = [ "networkmanager" "wheel" "plex"];
    packages = with pkgs; [
    #  kate
    #  thunderbird
    ];
    shell = pkgs.zsh;
  };

  users.users.plex = {
    isSystemUser = true; # Plex usually runs as a system user
    group = "plex";
    #extraGroups = [ "plexusers" ]; # Add "plexusers" here
    # Other Plex user properties might be managed by the Plex module
  };

#+end_src

** Activation Scripts

   Use activationScripts to set permissions *after* the system is mounted
   This runs every time you rebuild your NixOS configuration.
   (Not currently using this since a kernel panic. Unsure if this was related or since i accidentally did nix-channell update)

  #+begin_src nix :tangle configuration.nix
#  system.activationScripts.setMediaPermissions = ''
#   echo "Setting permissions for /media for Plex and users..."
#
#    # Ensure /media is actually mounted before attempting to change permissions
#    if ! mountpoint -q /media; then
#      echo "/media is not mounted, skipping permission setup." >&2
#      exit 0 # Exit successfully, as the drive might be absent (e.g., external)
#    fi
#
#    # Use absolute paths to coreutils and findutils binaries provided by Nixpkgs
#    ${pkgs.coreutils}/bin/chown -R andrew:plexusers /media
#    ${pkgs.findutils}/bin/find /media -type d -exec ${pkgs.coreutils}/bin/chmod 775 {} \;
#    ${pkgs.findutils}/bin/find /media -type f -exec ${pkgs.coreutils}/bin/chmod 664 {} \;
#  '';
#

  #+end_src

** System Packages
Install packages that are system wide. Things like neovim wget emacs git

#+begin_src nix :tangle configuration.nix
environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    neovim
    emacs
    git
    cmake
    gcc
    kitty
    ghostty
    zsh
    home-manager
    gparted
    openssh
    seahorse
    polkit
    polkit_gnome
    libinput

    kdePackages.sddm
    kdePackages.ark
    kdePackages.dolphin
    kdePackages.qt6ct
    kdePackages.sddm-kcm
    kdePackages.qtvirtualkeyboard
    kdePackages.qtmultimedia
    kdePackages.qtsvg
    kdePackages.qtdeclarative




#   libsForQt5.qt5.qtgraphicaleffects
#   libsForQt5.qt5ct
#   libsForQt5.qt5.qtquickcontrols2
#   libsForQt5.qt5.qtsvg
#   libsForQt5.qt5.qtmultimedia




    python3
    waybar #some weirdness about having it in home-manager
    #inputs.zen-browser.packages."${system}".specific
    inputs.zen-browser.packages.${pkgs.system}.zenBrowser
    catppuccin-sddm
    sddm-sugar-dark
    sddm-astronaut

];

#+end_src

** System Services and Daemons

#+begin_src nix :tangle configuration.nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };
services.emacs = {
  enable = true;
};

#plex
  services.plex = {
   enable = true;
   openFirewall = true;
   package = pkgs.plex;

  };

#libinput is newer, allows faster response time between keyboard typing
services.libinput.enable = true;

programs.zsh = {
   enable = true;
   enableCompletion = true;
   ohMyZsh = {
     enable = true;
     plugins = ["git"];
     theme = "agnoster";
   };
   autosuggestions.enable = true;
   syntaxHighlighting.enable = true;
};

home-manager.backupFileExtension = "backup";
  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;
#+end_src

** System State version
Probably won't edit this
  This value determines the NixOS release from which the default
  settings for stateful data, like file locations and database versions
  on your system were taken. It‘s perfectly fine and recommended to leave
  this value at the release version of the first install of this system.
  Before changing this value read the documentation for this option
  (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).

  I'm just going to post what that option explains

"This option defines the first version of NixOS you have installed on this particular machine, and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.

For example, if NixOS version XX.YY ships with AwesomeDB version N by default, and is then upgraded to version XX.YY+1, which ships AwesomeDB version N+1, the existing databases may no longer be compatible, causing applications to fail, or even leading to data loss.

The stateVersion mechanism avoids this situation by making the default version of such packages conditional on the first version of NixOS you’ve installed (encoded in stateVersion), instead of simply always using the latest one.

Note that this generally only affects applications that can’t upgrade their data automatically - applications and services supporting automatic migrations will remain on latest versions when you upgrade.

Most users should never change this value after the initial install, for any reason, even if you’ve upgraded your system to a new NixOS release.

This value does not affect the Nixpkgs version your packages and OS are pulled from, so changing it will not upgrade your system.

This value being lower than the current NixOS release does not mean your system is out of date, out of support, or vulnerable.

Do not change this value unless you have manually inspected all the changes it would make to your configuration, and migrated your data accordingly.
"

#+begin_src nix :tangle configuration.nix

  system.stateVersion = "24.11"; # Did you read the comment?

}#End of configuration.nix!

#+end_src

* FILESYSTEM.NIX
#+begin_src nix :tangle filesystem.nix
{ config, pkgs, ... }:

{

#uuid of 8tb 940f4332-3aaf-4e83-a244-5d0e3f788569
  fileSystems."/media" = { # Choose your desired mount point
    device = "/dev/disk/by-uuid/940f4332-3aaf-4e83-a244-5d0e3f788569"; # Replace with your actual UUID
    fsType = "ext4"; # Replace with your filesystem type (e.g., "btrfs", "xfs")
    options = [ "defaults" "users" "nofail" ]; # Common options, "nofail" is useful for HDDs
  };

}

#+end_src
* ZEN.NIX
Not really sure what the right way to go about this is, but i'm going to take the flake.nix from MarceColl and modify it to have modern zen.
I want to ultimately have it auto-update so i don't get that stupid notification every time
file:/home/andrew/nix-flakes/zen-browser/flake.nix
** flake.nix
#+begin_src nix :tangle ../nix-flakes/zen-browser/flake.nix
{
  description = "Zen Browser";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  };

  outputs = { self, nixpkgs }:
    let
      system = "x86_64-linux";
      version = "1.14.11b";
      pkgs = import nixpkgs {
        inherit system;
        config = {
        allowUnfree = true;
        };
      };

      runtimeLibs = with pkgs; [
        libGL libGLU libevent libffi libjpeg libpng libstartup_notification libvpx libwebp
        stdenv.cc.cc fontconfig libxkbcommon zlib freetype
        gtk3 libxml2 dbus xcb-util-cursor alsa-lib libpulseaudio pango atk cairo gdk-pixbuf glib
        udev libva mesa libnotify cups pciutils
        ffmpeg libglvnd pipewire
      ] ++ (with pkgs.xorg; [
        libxcb libX11 libXcursor libXrandr libXi libXext libXcomposite libXdamage
        libXfixes libXScrnSaver
      ]);

      zenBrowser = pkgs.stdenv.mkDerivation {
        pname = "zen-browser";
        inherit version;

        src = pkgs.fetchurl {
          url = "https://github.com/zen-browser/desktop/releases/download/${version}/zen.linux-x86_64.tar.xz";
          sha256 = "b2dc6e3c7c4e1f7f28628a9d7c51f21ef10013fe11152c87171a9cd5f9ee6778";
        };

        desktopSrc = ./.;

        nativeBuildInputs = [ pkgs.makeWrapper pkgs.gawk ];

        dontUnpack = true;

        installPhase = ''
          # Unpack the browser tarball to the build directory
          tar -xf $src --strip-components=1

            # Create destination directories
  mkdir -p $out/bin
  mkdir -p $out/share/applications/
  mkdir -p $out/share/icons/hicolor/128x128/apps/

  # Install browser binaries
  cp -r * $out/bin/

  # Copy desktop file to the build directory and then modify it
  cp "$desktopSrc/zen.desktop" ./zen.desktop

  substituteInPlace ./zen.desktop \
    --replace "Exec=zen" "Exec=$out/bin/zen"

  # Install the modified desktop file
  install -m644 ./zen.desktop $out/share/applications/

  # Install the icon
  install -m644 $out/bin/browser/chrome/icons/default/default128.png $out/share/icons/hicolor/128x128/apps/zen.png
'';

        dontPatchELF = true;

        preFixup = ''
          patchelf --set-interpreter "$(cat ${pkgs.stdenv.cc.libc}/nix-support/dynamic-linker)" $out/bin/zen
          wrapProgram $out/bin/zen \
            --set MOZ_LEGACY_PROFILES 1 \
            --set MOZ_ALLOW_DOWNGRADE 1 \
            --set MOZ_APP_LAUNCHER zen \
            --prefix LD_LIBRARY_PATH : "${pkgs.lib.makeLibraryPath runtimeLibs}"
        '';

        meta = with pkgs.lib; {
          description = "Zen Browser";
          homepage = "https://zenbrowser.com/";
          license = licenses.unfree;
          maintainers = [ ];
          platforms = [ "x86_64-linux" ];
        };
      };
    in
    {
      packages.${system}.zenBrowser = zenBrowser;
      defaultPackage.${system} = zenBrowser;
    };
}

#+end_src
** zen.desktop
#+begin_src desktop
#!/usr/bin/env xdg-open
[Desktop Entry]
Name=Zen Browser
Exec=zen %u
Icon=zen
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;x-scheme-handler/https;application/x-xpinstall;application/pdf;application/json;
StartupWMClass=zen-alpha
Categories=Network;WebBrowser;
StartupNotify=true
Terminal=false
X-MultipleArgs=false
Keywords=Internet;WWW;Browser;Web;Explorer;
Actions=new-window;new-private-window;profilemanager;

[Desktop Action new-window]
Name=Open a New Window
Exec=zen %u

[Desktop Action new-private-window]
Name=Open a New Private Window
Exec=zen --private-window %u

[Desktop Action profilemanager]
Name=Open the Profile Manager
Exec=zen --ProfileManager %u

#+end_src
* HARDWARE-CONFIGURATION.NIX
 This file is generated by nixos-generate-config and should not be modified really.

 #+begin_src nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/af48a79d-f123-45e5-aed5-f5774e205bda";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A501-6107";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


 #+end_src
* HYPRLAND
Hyprland config contains several parts. In JaKooLit's version, there are many many modules and everything is sourced to the hyprland.conf.
I feel like having the org file with sections will make more sense for me with everything in one file.
** Monitors
################
### MONITORS ###
################

# See https://wiki.hyprland.org/Configuring/Monitors/
# monitor=,1920x1080@120,auto,auto


#+begin_src conf

monitor=,3840x2160@30,auto,1.5


#+end_src

** Programs and aliases

###################
### MY PROGRAMS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/
#+begin_src conf
$terminal = ghostty
$fileManager = dolphin
$menu = rofi -show drun
$edit = emacsclient -c -a 'emacs'
$browser = zen

#+end_src
# Set programs that you use
** Autostart

#################
### AUTOSTART ###
#################

 Autostart necessary processes (like notifications daemons, status bars, etc.)
 Or execute your favorite apps at launch like this:
#+begin_src conf
exec-once = $terminal
exec-once = $edit
exec-once = $browser
exec-once = nm-applet --indicator &
# exec-once = waybar & hyprpaper & firefox
exec-once = sleep 1 && waybar
exec-once = /usr/libexec/xdg-desktop-portal-hyprland
exec-once = polkit-agent-helper-1
exec-once = systemctl start --user polkit-gnome-authentication-agent-1

#+end_src
** ENVIRONMENT VARIABLES

#############################
### ENVIRONMENT VARIABLES ###
#############################

# See https://wiki.hyprland.org/Configuring/Environment-variables/
#+begin_src conf
env = XCURSOR_THEME,Bibata-Modern-Ice
env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24
env = HYPRCURSOR_THEME,Bibata-Modern-Ice
env = GTK_THEME,adwaita:dark
env = XDG_CURRENT_DESKTOP,Hyprland
env = QT_QPA_PLATFORMTHEME,qt6ct

exec-once = gsettings set org.gnome.desktop.interface gtk-theme "YOUR_DARK_GTK3_THEME"   # for GTK3 apps
exec-once = gsettings set org.gnome.desktop.interface color-scheme "prefer-dark"   # for GTK4 apps

#+end_src
** LOOK AND FEEL

#####################
### LOOK AND FEEL ###
#####################

# Refer to https://wiki.hyprland.org/Configuring/Variables/

# https://wiki.hyprland.org/Configuring/Variables/#general
#+begin_src conf
general {
    gaps_in = 5
    gaps_out = 20

    border_size = 2

    # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)

    # Set to true enable resizing windows by clicking and dragging on borders and gaps
    resize_on_border = false

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = false

    layout = dwindle
}

# https://wiki.hyprland.org/Configuring/Variables/#decoration
decoration {
    rounding = 10
    rounding_power = 2

    # Change transparency of focused and unfocused windows
    active_opacity = 1.0
    inactive_opacity = 1.0

    shadow {
        enabled = true
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }

    # https://wiki.hyprland.org/Configuring/Variables/#blur
    blur {
        enabled = true
        size = 3
        passes = 1

        vibrancy = 0.1696
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = yes, please :)

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

# Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrule = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrule = rounding 0, floating:0, onworkspace:w[tv1]
# windowrule = bordersize 0, floating:0, onworkspace:f[1]
# windowrule = rounding 0, floating:0, onworkspace:f[1]

# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}

# See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
master {
    new_status = master
}

# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    force_default_wallpaper = -1 # Set to 0 or 1 to disable the anime mascot wallpapers
    disable_hyprland_logo = false # If true disables the random hyprland logo / anime girl background. :(
}


#+end_src
** INPUT

#############
### INPUT ###
#############

# https://wiki.hyprland.org/Configuring/Variables/#input
#+begin_src conf
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 1

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = false
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    workspace_swipe = true
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}

#+end_src
** KEYBINDINGS

###################
### KEYBINDINGS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/
#+begin_src conf
$mainMod = SUPER # Sets "Windows" key as main modifier

# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = $mainMod, Return, exec, $terminal
bind = $mainMod, Q, killactive,
bind = $mainMod, M, exit,
bind = $mainMod, E, exec, $edit
bind = $mainMod, F, exec, $fileManager
bind = $mainMod, V, togglefloating,
bind = $mainMod, R, exec, $menu
bind = $mainMod, P, pseudo, # dwindle
bind = $mainMod, J, togglesplit, # dwindle
bind = $mainMod, B, exec, $browser       #old xdg-open "https://"
bind = $mainMod SHIFT, R, exec, pkill waybar && hyprctl dispatch exec waybar
bind = $mainMod SHIFT, H, exec, hyprctl reload


# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous


#+end_src
** WINDOWS AND WORKSPACES
##############################
### WINDOWS AND WORKSPACES ###
##############################

# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

# Example windowrule
# windowrule = float,class:^(kitty)$,title:^(kitty)$

# Ignore maximize requests from apps. You'll probably like this.
#+begin_src conf
windowrule = suppressevent maximize, class:.*

# Fix some dragging issues with XWayland
windowrule = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0
windowrule = workspace 1, class:^(zen*)$
windowrule = workspace 2, class:^([Ee]macs)$


#+end_src
* WAYBAR
**TODO same as hyprland; copy in waybar config and link them to dotfiles repo
